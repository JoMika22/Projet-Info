#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_PERSOS 10
#define MAX_TEAM_NAME 50
#define TEAM_SIZE 2

// Structure d'une attaque spéciale
typedef struct {
    char* nom;
    int cooldown_max;
    int reload;
    char* description;
    int effets; // 0 = dégâts, 1 = bouclier
} SpecialAttack;

// Structure d'un personnage
typedef struct {
    char* nom;
    int PV;
    int PVmax;
    int att;
    int def;
    int agi;
    int vit;
    SpecialAttack* special;
    int special_cd;
    int shield_active;
} Perso;

// Structure d'une équipe
typedef struct {
    char nom_equipe[MAX_TEAM_NAME];
    Perso** membres;
    int taille;
} Equipe;

// Prototypes
Perso** creer_persos_disponibles();
void liberer_persos(Perso** persos);
void afficher_menu(Perso** persos);
Equipe* creer_equipe_joueur(Perso** persos);
Equipe* creer_equipe_IA(Perso** persos);
void afficher_equipe(Equipe* e);
int calculer_degats(Perso* atk, Perso* def);
void appliquer_action(Perso* atk, Perso* def, int action);
int choisir_action_joueur(Perso* p);
int choisir_action_ia(Perso* p);
void tour_de_combat(Equipe* j, Equipe* ia);
void liberer_equipe(Equipe* e);

// Attaques spéciales
SpecialAttack special_attacks[10] = {
    {"Éclair Foudroyant", 3, 5, "Décharge un éclair électrique puissant", 0},
    {"Susanoo Protecteur", 3, 6, "Bouclier spirituel (réduit dégâts)", 1},
    {"Coup de Bicycle", 3, 4, "Frappe acrobatique dévastatrice", 0},
    {"Super Splash", 3, 5, "Attaque aquatique massive", 0},
    {"Puissance Ogre", 3, 6, "Déchaîne la force primitive", 0},
    {"Champions League Strike", 3, 4, "Frappe précise enroulée", 0},
    {"Santoryu Ougi", 3, 5, "Triple attaque éclair", 0},
    {"Bubble Beam", 3, 4, "Canon à bulles paralysant", 0},
    {"Kamehameha", 3, 7, "Attaque énergétique ultime", 0},
    {"Muffin Assault", 3, 3, "Muffins empoisonnés", 0}
};

// Création des personnages
Perso** creer_persos_disponibles() {
    Perso** persos = malloc(sizeof(Perso*) * MAX_PERSOS);
    if (!persos) { perror("malloc persos"); exit(1); }
    const char* noms[MAX_PERSOS] = {"Pikachu","Madara","Salah","El Primo","Shrek","CR7","Zoro","Bob l'éponge","Goku","Muffin Man"};
    for (int i = 0; i < MAX_PERSOS; i++) {
        persos[i] = malloc(sizeof(Perso));
        if (!persos[i]) { perror("malloc perso"); exit(1); }
        persos[i]->nom = strdup(noms[i]);
        persos[i]->PVmax = 800 + i * 100;  // 800 à 1700
        persos[i]->PV = persos[i]->PVmax;
        persos[i]->att = 150 - i * 5;     // 150 à 105
        persos[i]->def = 80 + i * 2;
        persos[i]->agi = 30 + i * 3;
        persos[i]->vit = 100 + i * 3;
        persos[i]->special = &special_attacks[i];
        persos[i]->special_cd = 0;
        persos[i]->shield_active = 0;
    }
    return persos;
}

// Libération des personnages
void liberer_persos(Perso** persos) {
    for (int i = 0; i < MAX_PERSOS; i++) {
        free(persos[i]->nom);
        free(persos[i]);
    }
    free(persos);
}

// Affiche la liste des persos dispo avec indices
 void afficher_menu(Perso** persos) {
    printf("\n=== CHOIX DES PERSONNAGES ===\n");
    for (int i = 0; i < MAX_PERSOS; i++) {
        printf("%2d) %s  PV:%d ATK:%d DEF:%d VIT:%d\n",
               i+1,
               persos[i]->nom,
               persos[i]->PVmax,
               persos[i]->att,
               persos[i]->def,
               persos[i]->vit);
    }
    printf("============================\n");
}

Equipe* creer_equipe_joueur(Perso** persos) {
    Equipe* e = malloc(sizeof(Equipe));
    if (!e) { perror("malloc equipe"); exit(1); }
    printf("Nom de l'équipe : ");
    fgets(e->nom_equipe, MAX_TEAM_NAME, stdin);
    e->nom_equipe[strcspn(e->nom_equipe, "\n")] = 0;
    e->taille = TEAM_SIZE;
    e->membres = malloc(sizeof(Perso*) * TEAM_SIZE);
    if (!e->membres) { perror("malloc membres"); exit(1); }

    afficher_menu(persos);
    for (int i = 0; i < TEAM_SIZE; i++) {
        int choix;
        printf("Sélection perso %d [1-%d] : ", i+1, MAX_PERSOS);
        scanf("%d", &choix);
        getchar();
        while (choix < 1 || choix > MAX_PERSOS) {
            printf("Choix invalide. Reessayez : ");
            scanf("%d", &choix);
            getchar();
        }
        e->membres[i] = persos[choix-1];
    }
    return e;
}

Equipe* creer_equipe_IA(Perso** persos) {
    Equipe* e = malloc(sizeof(Equipe));
    if (!e) { perror("malloc equipe IA"); exit(1); }
    strncpy(e->nom_equipe, "IA", MAX_TEAM_NAME-1);
    e->nom_equipe[MAX_TEAM_NAME-1] = '\0';
    e->taille = TEAM_SIZE;
    e->membres = malloc(sizeof(Perso*) * TEAM_SIZE);
    if (!e->membres) { perror("malloc membres IA"); exit(1); }
    int used[MAX_PERSOS] = {0};
    for (int i = 0; i < TEAM_SIZE; i++) {
        int r;
        do { r = rand() % MAX_PERSOS; } while (used[r]);
        used[r] = 1;
        e->membres[i] = persos[r];
    }
    return e;
}

void afficher_equipe(Equipe* e) {
    printf("\n-- Equipe %s --\n", e->nom_equipe);
    for (int i = 0; i < e->taille; i++) {
        Perso* p = e->membres[i];
        printf("%s (PV:%d/%d ATK:%d DEF:%d VIT:%d)\n",
               p->nom, p->PV, p->PVmax, p->att, p->def, p->vit);
    }
}

int calculer_degats(Perso* atk, Perso* def) {
    int base = atk->att * 2 - def->def;
    if (base < 1) base = 1;
    if (def->shield_active) base /= 2;
    int var = base / 10;
    int rnd = (rand() % (2*var+1)) - var;
    return base + rnd;
}

void appliquer_action(Perso* atk, Perso* def, int action) {
    atk->shield_active = 0;
    switch(action) {
        case 1: {
            int dmg = calculer_degats(atk, def);
            def->PV -= dmg;
            if (def->PV < 0) def->PV = 0;
            printf("%s attaque (%d dégâts) à %s\n", atk->nom, dmg, def->nom);
            break;
        }
        case 2:
            atk->shield_active = 1;
            printf("%s active un bouclier\n", atk->nom);
            break;
        case 3:
            if (atk->special_cd > 0) {
                printf("Spécial indisponible (cd:%d)\n", atk->special_cd);
                return;
            }
            printf("%s utilise %s\n", atk->nom, atk->special->nom);
            if (atk->special->effets == 1) {
                atk->shield_active = 1;
            } else {
                int dmg2 = calculer_degats(atk, def) * 2;
                def->PV -= dmg2;
                if (def->PV < 0) def->PV = 0;
                printf("Spécial inflige %d dégâts\n", dmg2);
            }
            atk->special_cd = atk->special->cooldown_max;
            break;
        default:
            break;
    }
}

int choisir_action_joueur(Perso* p) {
    printf("Actions : 1.Attaque  2.Shield  3.Special (cd:%d) > ", p->special_cd);
    int a;
    scanf("%d", &a);
    getchar();
    if (a == 3 && p->special_cd > 0) {
        printf("Special pas dispo\n");
        return choisir_action_joueur(p);
    }
    return a;
}

// Choix action IA simple
int choisir_action_ia(Perso* p) {
    if (p->special_cd == 0 && rand() % 3 == 0) return 3;
    if (rand() % 5 == 0) return 2;
    return 1;
}

// Boucle de combat avec affichage des PV à chaque tour
void tour_de_combat(Equipe* j, Equipe* ia) {
    int idx_j = 0, idx_ia = 0;
    while (idx_j < j->taille && idx_ia < ia->taille) {
        Perso* pj = j->membres[idx_j];
        Perso* pi = ia->membres[idx_ia];
        // Afficher PV actuels avant le tour
        printf("\n[Tour] %s PV:%d/%d | %s PV:%d/%d\n",
               pj->nom, pj->PV, pj->PVmax,
               pi->nom, pi->PV, pi->PVmax);
        // Réinitialiser boucliers
        pj->shield_active = pi->shield_active = 0;
        // Tour joueur
        int act_j = choisir_action_joueur(pj);
        appliquer_action(pj, pi, act_j);
        if (pi->PV == 0) { printf("%s KO!\n", pi->nom); idx_ia++; continue; }
        // Tour IA
        int act_i = choisir_action_ia(pi);
        appliquer_action(pi, pj, act_i);
        if (pj->PV == 0) { printf("%s KO!\n", pj->nom); idx_j++; }
        // Décrémenter cooldowns
        if (pj->special_cd > 0) pj->special_cd--;
        if (pi->special_cd > 0) pi->special_cd--;
    }
    if (idx_j < j->taille) printf("\nVictoire Joueur!\n");
    else printf("\nVictoire IA!\n");
}

// Libération équipe
void liberer_equipe(Equipe* e) {
    free(e->membres);
    free(e);
}

int main() {
    srand((unsigned)time(NULL));
    Perso** roster = creer_persos_disponibles();
    Equipe* joueur = creer_equipe_joueur(roster);
    Equipe* ia = creer_equipe_IA(roster);
    printf("\n-- Equipes --\n");
    afficher_equipe(joueur);
    afficher_equipe(ia);
    tour_de_combat(joueur, ia);
    liberer_equipe(joueur);
    liberer_equipe(ia);
    liberer_persos(roster);
    return 0;
}
