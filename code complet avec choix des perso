#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_PERSOS 10
#define MAX_TEAM_NAME 50
#define TOUR_AVENTURE_NIVEAUX 5

// Structure d'une attaque spéciale
typedef struct {
    char* nom;
    int cooldown_max;
    int reload;
    char* description;
    int effets; // 0 = dégâts, 1 = bouclier
} SpecialAttack;

// Structure d'un personnage
typedef struct {
    char* nom;
    int PV;
    int PVmax;
    int att;
    int def;
    int agi;
    int vit;
    SpecialAttack* special;
    int special_cd;
    int shield_active;
} Perso;

// Structure d'une équipe (pour le 2v2)
typedef struct {
    char nom_equipe[MAX_TEAM_NAME];
    Perso** membres;
    int taille;
} Equipe;

// Attaques spéciales disponibles
SpecialAttack special_attacks[MAX_PERSOS] = {
    {"Éclair Foudroyant", 3, 5, "Décharge un éclair électrique puissant", 0},
    {"Susanoo Protecteur", 3, 6, "Bouclier spirituel (réduit dégâts)", 1},
    {"Coup de Bicycle", 3, 4, "Frappe acrobatique dévastatrice", 0},
    {"Super Splash", 3, 5, "Attaque aquatique massive", 0},
    {"Puissance Ogre", 3, 6, "Déchaîne la force primitive", 0},
    {"Champions League Strike", 3, 4, "Frappe précise enroulée", 0},
    {"Santoryu Ougi", 3, 5, "Triple attaque éclair", 0},
    {"Bubble Beam", 3, 4, "Canon à bulles paralysant", 0},
    {"Kamehameha", 3, 7, "Attaque énergétique ultime", 0},
    {"Muffin Assault", 3, 3, "Muffins empoisonnés", 0}
};

// Prototypes des fonctions 2v2
Perso** creer_persos_disponibles();
void liberer_persos(Perso** persos);
void afficher_menu(Perso** persos);
Equipe* creer_equipe_joueur(Perso** persos);
Equipe* creer_equipe_IA(Perso** persos, int diff);
void afficher_equipe(Equipe* e);
int calculer_degats(Perso* atk, Perso* def);
void appliquer_action(Perso* atk, Perso* def, int action);
int choisir_action_joueur(Perso* p);
int choisir_action_ia(Perso* p);
void tour_de_combat(Equipe* j, Equipe* ia);
void liberer_equipe(Equipe* e);

// Prototypes menu
int afficher_menu_principal();
void afficher_difficulte();
int choisir_difficulte();

// Prototypes mode aventure
void runAdventure(int diff);
void distribuer_points(Perso* p, int points);
int choisir_classe(Perso* p);
void choisir_special_initial(Perso* p);
int combatSolo(Perso* hero, Perso* enemy, int* specCount);

int main() {
    srand((unsigned)time(NULL));
    while (1) {
        int choix = afficher_menu_principal();
        if (choix == 3) break;
        int diff = choisir_difficulte();
        if (choix == 1) {
            runAdventure(diff);
        } else if (choix == 2) {
            // Mode 2v2
            Perso** roster = creer_persos_disponibles();
            Equipe* joueur = creer_equipe_joueur(roster);
            Equipe* ia = creer_equipe_IA(roster, diff);
            printf("\n-- Équipes --\n");
            afficher_equipe(joueur);
            afficher_equipe(ia);
            tour_de_combat(joueur, ia);
            liberer_equipe(joueur);
            liberer_equipe(ia);
            liberer_persos(roster);
        }
        printf("\nAppuyez sur Entrée pour revenir au menu principal...");
        getchar();
    }
    printf("Au revoir !\n");
    return 0;
}

// ===== Implémentation Menu =====
int afficher_menu_principal() {
    printf("=== MENU PRINCIPAL ===\n");
    printf("1) Mode Aventure : L’Ascension du Champion\n");
    printf("2) Combat Classique 2v2\n");
    printf("3) Quitter\n");
    printf("======================\n");
    printf("Fais ton choix : ");
    int choix; scanf("%d", &choix); getchar();
    return choix;
}

void afficher_difficulte() {
    printf("\nChoisis la difficulté :\n");
    printf("1) Facile\n");
    printf("2) Normal\n");
    printf("3) Difficile\n");
}

int choisir_difficulte() {
    afficher_difficulte();
    int diff; scanf("%d", &diff); getchar();
    if (diff < 1 || diff > 3) {
        printf("Choix invalide. Reessaie.\n");
        return choisir_difficulte();
    }
    return diff;
}

// ===== Implémentation 2v2 =====
Perso** creer_persos_disponibles() {
    Perso** persos = malloc(sizeof(Perso*) * MAX_PERSOS);
    if (!persos) { perror("malloc persos"); exit(1); }
    const char* noms[MAX_PERSOS] = {"Pikachu","Madara","Salah","El Primo","Shrek","CR7","Zoro","Bob l'éponge","Goku","Muffin Man"};
    for (int i = 0; i < MAX_PERSOS; i++) {
        persos[i] = malloc(sizeof(Perso));
        persos[i]->nom = strdup(noms[i]);
        persos[i]->PVmax = 800 + i * 100;
        persos[i]->PV = persos[i]->PVmax;
        persos[i]->att = 150 - i * 5;
        persos[i]->def = 80 + i * 2;
        persos[i]->agi = 30 + i * 3;
        persos[i]->vit = 100 + i * 3;
        persos[i]->special = &special_attacks[i];
        persos[i]->special_cd = 0;
        persos[i]->shield_active = 0;
    }
    return persos;
}

void liberer_persos(Perso** persos) {
    for (int i = 0; i < MAX_PERSOS; i++) {
        free(persos[i]->nom);
        free(persos[i]);
    }
    free(persos);
}

void afficher_menu(Perso** persos) {
    printf("\n=== CHOIX DES PERSONNAGES ===\n");
    for (int i = 0; i < MAX_PERSOS; i++) {
        printf("%2d) %s  PV:%d ATK:%d DEF:%d VIT:%d\n",
               i+1,
               persos[i]->nom,
               persos[i]->PVmax,
               persos[i]->att,
               persos[i]->def,
               persos[i]->vit);
    }
    printf("============================\n");
}

Equipe* creer_equipe_joueur(Perso** persos) {
    Equipe* e = malloc(sizeof(Equipe));
    printf("Nom de l'équipe : ");
    fgets(e->nom_equipe, MAX_TEAM_NAME, stdin);
    e->nom_equipe[strcspn(e->nom_equipe, "\n")] = 0;
    e->taille = 2;
    e->membres = malloc(sizeof(Perso*) * 2);
    afficher_menu(persos);
    for (int i = 0; i < 2; i++) {
        int choix;
        printf("Sélection perso %d [1-%d] : ", i+1, MAX_PERSOS);
        scanf("%d", &choix); getchar();
        while (choix < 1 || choix > MAX_PERSOS) {
            printf("Choix invalide. Reessayez : ");
            scanf("%d", &choix); getchar();
        }
        e->membres[i] = persos[choix-1];
    }
    return e;
}

Equipe* creer_equipe_IA(Perso** persos, int diff) {
    Equipe* e = malloc(sizeof(Equipe));
    strncpy(e->nom_equipe, "IA", MAX_TEAM_NAME-1);
    e->nom_equipe[MAX_TEAM_NAME-1] = '\0';
    e->taille = 2;
    e->membres = malloc(sizeof(Perso*) * 2);
    int used[MAX_PERSOS] = {0};
    for (int i = 0; i < 2; i++) {
        int r;
        do { r = rand() % MAX_PERSOS; } while (used[r]);
        used[r] = 1;
        // Boost stats selon la difficulté
        Perso* base = persos[r];
        Perso* clone = malloc(sizeof(Perso));
        *clone = *base;
        double factor = 1.0 + 0.2 * (diff - 1);
        clone->PVmax = (int)(clone->PVmax * factor);
        clone->PV = clone->PVmax;
        clone->att = (int)(clone->att * factor);
        clone->def = (int)(clone->def * factor);
        clone->agi = (int)(clone->agi * factor);
        clone->vit = (int)(clone->vit * factor);
        clone->special_cd = 0;
        clone->shield_active = 0;
        e->membres[i] = clone;
    }
    return e;
}

void afficher_equipe(Equipe* e) {
    printf("\n-- Équipe %s --\n", e->nom_equipe);
    for (int i = 0; i < e->taille; i++) {
        Perso* p = e->membres[i];
        printf("%s (PV:%d/%d ATK:%d DEF:%d VIT:%d)\n",
               p->nom, p->PV, p->PVmax, p->att, p->def, p->vit);
    }
}

int calculer_degats(Perso* atk, Perso* def) {
    int base = atk->att * 2 - def->def;
    if (base < 1) base = 1;
    if (def->shield_active) base /= 2;
    int var = base / 10;
    int rnd = (rand() % (2*var+1)) - var;
    return base + rnd;
}

void appliquer_action(Perso* atk, Perso* def, int action) {
    atk->shield_active = 0;
    switch(action) {
        case 1: {
            int dmg = calculer_degats(atk, def);
            def->PV -= dmg;
            if (def->PV < 0) def->PV = 0;
            printf("%s attaque (%d dégâts) à %s\n", atk->nom, dmg, def->nom);
            break;
        }
        case 2:
            atk->shield_active = 1;
            printf("%s active un bouclier\n", atk->nom);
            break;
        case 3:
            if (atk->special_cd > 0) {
                printf("Spécial indisponible (cd:%d)\n", atk->special_cd);
                return;
            }
            printf("%s utilise %s\n", atk->nom, atk->special->nom);
            if (atk->special->effets == 1) {
                atk->shield_active = 1;
            } else {
                int dmg2 = calculer_degats(atk, def) * 2;
                def->PV -= dmg2;
                if (def->PV < 0) def->PV = 0;
                printf("Spécial inflige %d dégâts\n", dmg2);
            }
            atk->special_cd = atk->special->cooldown_max;
            break;
        default:
            break;
    }
}

int choisir_action_joueur(Perso* p) {
    printf("Actions : 1.Attaque  2.Shield  3.Special (cd:%d) > ", p->special_cd);
    int a;
    scanf("%d", &a);
    getchar();
    if (a == 3 && p->special_cd > 0) {
        printf("Special pas dispo\n");
        return choisir_action_joueur(p);
    }
    return a;
}

int choisir_action_ia(Perso* p) {
    if (p->special_cd == 0 && rand() % 3 == 0) return 3;
    if (rand() % 5 == 0) return 2;
    return 1;
}

void tour_de_combat(Equipe* j, Equipe* ia) {
    int idx_j = 0, idx_ia = 0;
    while (idx_j < j->taille && idx_ia < ia->taille) {
        Perso* pj = j->membres[idx_j];
        Perso* pi = ia->membres[idx_ia];
        printf("\n[Tour] %s PV:%d/%d | %s PV:%d/%d\n",
               pj->nom, pj->PV, pj->PVmax,
               pi->nom, pi->PV, pi->PVmax);
        pj->shield_active = pi->shield_active = 0;
        int act_j = choisir_action_joueur(pj);
        appliquer_action(pj, pi, act_j);
        if (act_j == 3) ; // spécial utilisé
        if (pi->PV == 0) { printf("%s KO!\n", pi->nom); idx_ia++; continue; }
        int act_i = choisir_action_ia(pi);
        appliquer_action(pi, pj, act_i);
        if (pj->PV == 0) { printf("%s KO!\n", pj->nom); idx_j++; }
        if (pj->special_cd > 0) pj->special_cd--;
        if (pi->special_cd > 0) pi->special_cd--;
    }
    if (idx_j < j->taille) printf("\nVictoire Joueur!\n");
    else printf("\nVictoire IA!\n");
}

void liberer_equipe(Equipe* e) {
    for (int i = 0; i < e->taille; i++) {
        free(e->membres[i]);
    }
    free(e->membres);
    free(e);
}

// ===== Implémentation Aventure =====
void distribuer_points(Perso* p, int points) {
    int reste = points;
    while (reste > 0) {
        printf("\nPoints restants: %d\n", reste);
        printf("1) PV (+1 PV)\n2) Attaque (+1 ATK)\n3) Défense (+1 DEF)\n4) Vitesse (+1 VIT)\n5) Agilité (+1 AGI)\n");
        printf("Choisis attribut: ");
        int choix, pts;
        scanf("%d", &choix); getchar();
        if (choix < 1 || choix > 5) { printf("Valeur invalide\n"); continue; }
        printf("Combien de points à mettre? ");
        scanf("%d", &pts); getchar();
        if (pts < 0 || pts > reste) { printf("Nombre invalide\n"); continue; }
        switch (choix) {
            case 1: p->PVmax += pts; p->PV += pts; break;
            case 2: p->att += pts; break;
            case 3: p->def += pts; break;
            case 4: p->vit += pts; break;
            case 5: p->agi += pts; break;
        }
        reste -= pts;
    }
}

int choisir_classe(Perso* p) {
    printf("Choisis une classe :\n");
    printf("1) Tank (+200 PV)\n");
    printf("2) Assassin (+20 Agilité)\n");
    printf("3) Mage (+20 Attaque)\n");
    int c; scanf("%d", &c); getchar();
    switch (c) {
        case 1: p->PVmax += 200; p->PV = p->PVmax; break;
        case 2: p->agi += 20; break;
        case 3: p->att += 20; break;
        default: printf("Classe invalide, choix par défaut Tank.\n"); p->PVmax += 200; p->PV = p->PVmax; break;
    }
    return c;
}

void choisir_special_initial(Perso* p) {
    int choixs[3];
    for (int i = 0; i < 3; i++) {
        int r;
        do { r = rand() % MAX_PERSOS; }
        while (i>0 && (r == choixs[0] || (i>1 && r == choixs[1])));
        choixs[i] = r;
        printf("%d) %s\n", i+1, special_attacks[r].nom);
    }
    printf("Choisis ton attaque spéciale (1-3) : ");
    int sel; scanf("%d", &sel); getchar();
    if (sel < 1 || sel > 3) sel = 1;
    p->special = &special_attacks[choixs[sel-1]];
    p->special_cd = 0;
    p->shield_active = 0;
}

int combatSolo(Perso* hero, Perso* enemy, int* specCount) {
    while (hero->PV > 0 && enemy->PV > 0) {
        printf("\n[Tour] %s PV:%d/%d | %s PV:%d/%d\n",
               hero->nom, hero->PV, hero->PVmax,
               enemy->nom, enemy->PV, enemy->PVmax);
        hero->shield_active = enemy->shield_active = 0;
        int act = choisir_action_joueur(hero);
        if (act == 3) (*specCount)++;
        appliquer_action(hero, enemy, act);
        if (enemy->PV == 0) return 1;
        int act_i = choisir_action_ia(enemy);
        appliquer_action(enemy, hero, act_i);
        if (hero->PV == 0) return 0;
        if (hero->special_cd > 0) hero->special_cd--;
        if (enemy->special_cd > 0) enemy->special_cd--;
    }
    return hero->PV > 0;
}

void runAdventure(int diff) {
    printf("\n--- MODE AVENTURE : L’Ascension du Champion ---\n");
    Perso hero;
    char buffer[50];
    printf("Entrez le nom de votre héros : ");
    fgets(buffer, 50, stdin);
    buffer[strcspn(buffer, "\n")] = 0;
    hero.nom = strdup(buffer);
    hero.PVmax = 100; hero.PV = 100;
    hero.att = 10; hero.def = 10; hero.vit = 10; hero.agi = 10;
    hero.special = NULL; hero.special_cd = 0; hero.shield_active = 0;
    choisir_classe(&hero);
    printf("\nRépartissez 500 points d'attributs :\n");
    distribuer_points(&hero, 500);
    printf("\nChoisis ton attaque spéciale initiale :\n");
    choisir_special_initial(&hero);
    
    Perso** roster = creer_persos_disponibles();
    int XP = 0, usedSpecs = 0;
    for (int lvl = 1; lvl <= TOUR_AVENTURE_NIVEAUX; lvl++) {
        printf("\n=== Niveau %d ===\n", lvl);
        int idx;
        if (lvl == 1) idx = 0;
        else if (lvl == 2) idx = 3;
        else if (lvl == 3) idx = 5;
        else if (lvl == 4) idx = 6;
        else idx = (rand()%2==0?8:1);
        Perso enemy = *roster[idx];
        double factor = 1.0 + 0.2 * (diff - 1);
        enemy.PVmax = (int)(enemy.PVmax * factor);
        enemy.PV = enemy.PVmax;
        enemy.att = (int)(enemy.att * factor);
        enemy.def = (int)(enemy.def * factor);
        enemy.agi = (int)(enemy.agi * factor);
        enemy.vit = (int)(enemy.vit * factor);
        enemy.special_cd = 0; enemy.shield_active = 0;
        if (!combatSolo(&hero, &enemy, &usedSpecs)) {
            printf("\nDéfaite au niveau %d. Game Over.\n", lvl);
            break;
        }
        int gain = lvl * 100;
        XP += gain;
        printf("Victoire ! XP gagné : %d\n", gain);
        if (lvl < TOUR_AVENTURE_NIVEAUX) {
            printf("\nAttribuez +50 points supplémentaires :\n");
            distribuer_points(&hero, 50);
        } else {
            printf("\nFélicitations ! Vous êtes devenu le Champion ultime !\n");
        }
    }
    printf("\n=== fiche récapitulative ===\n");
    printf("Héros : %s\n", hero.nom);
    printf("PV : %d/%d  ATK : %d  DEF : %d  VIT : %d  AGI : %d\n",
           hero.PV, hero.PVmax, hero.att, hero.def, hero.vit, hero.agi);
    printf("XP total gagné : %d\n", XP);
    printf("Nombre de coups spéciaux utilisés : %d\n", usedSpecs);
    liberer_persos(roster);
    free(hero.nom);
}
